package dao;

import util.JDBCUtil;
import vo.CharacterVO;
import vo.MemberVO;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class CharacterDAO {
	private List<Object> list = new ArrayList<>();
	private JDBCUtil jdbc = JDBCUtil.getInstance();
	private int result;
	
	public boolean createCharacter(CharacterVO charVo) throws Exception {
		StringBuilder sql = new StringBuilder();
		sql.append("INSERT INTO CHARACTERS (");
		sql.append("		CHAR_IDX,");
		sql.append("		CHAR_NM,");
		sql.append("		MEM_ID,");
		sql.append("		JOB,");
		sql.append("		FLOOR");
		sql.append("	) VALUES (");
		sql.append("		SEQ_CHARACTER_IDX.NEXTVAL,");
		sql.append("		?,");
		sql.append("		?,");
		sql.append("		?,");
		sql.append("		?");
		sql.append("	)");
		
		list.add(charVo.getCharName());
		list.add(charVo.getMemId());
		list.add(charVo.getJob());
		list.add(charVo.getFloor());
		
		result = jdbc.update(sql.toString(), list);
		
		if(result > 0) {
			return true;
		}
		return false;
	}
	
	public boolean deleteCharacter(CharacterVO charVo) throws Exception {
		StringBuilder sql = new StringBuilder();
		sql.append("DELETE FROM CHARACTERS");
		sql.append(" WHERE MEM_ID = ?");
		sql.append("   AND CHAR_IDX = ?");
		
		list.add(charVo.getMemId());
		list.add(charVo.getCharIdx());
		
		result = jdbc.update(sql.toString(), list);
		
		
		if(result > 0) {
			return true;
		}
		return false;
	}
	
	public List<Map<String, Object>> showAllCharacter(MemberVO vo) throws Exception {
		StringBuilder sql = new StringBuilder();
		sql.append("SELECT CHAR_NM,");
		sql.append("	            CHAR_LEV,");
		sql.append("	            JOB,");
		sql.append("	            CHAR_IDX,");
		sql.append("	            MEM_ID");
		sql.append("   FROM CHARACTERS");
		sql.append(" WHERE CHAR_IDX = ?");
		
		list.add(vo.getId());
		
		List<Map<String, Object>> result = jdbc.selectList(sql.toString(), list);
		List<CharacterVO> charList = new ArrayList<>();
		
		for(int i = 0; i < result.size(); i++) {
			CharacterVO character = new CharacterVO();
			character.setCharName((String)result.get(i).get("CHAR_NM"));
			character.setCharLevel((Integer)result.get(i).get("CHAR_LEV"));
			character.setJob((String)result.get(i).get("JOB"));
			character.setCharIdx((Integer)result.get(i).get("CHAR_IDX"));
			character.setMemId((String)result.get(i).get("MEM_ID"));
		}
		
		return result;
	}
	
	public Map<String, Object> showCharacterInfo(CharacterVO vo) throws Exception {
		StringBuilder sql = new StringBuilder();
		sql.append("SELECT *");
		sql.append("  FROM CHARACTERS");
		sql.append(" WHERE CHAR_IDX = ?");
	
		list.add(vo.getCharIdx());
		Map<String, Object> result =  jdbc.selectOne(sql.toString(), list);
		
		return result;
	}
	
	public boolean unEquippingWeapon(CharacterVO vo) throws Exception {
		StringBuilder sql = new StringBuilder();
		sql.append("UPDATE CHARACTERS");
		sql.append("	   SET CHAR_WEAPON = NULL");
		sql.append("	 WHERE CHAR_IDX = ?");

		list.add(vo.getCharIdx());
		result = jdbc.update(sql.toString(), list);
		
		if(result > 0) {
			return true;
		}
		return false;
	}
	
	public boolean unEquippingArmor(CharacterVO vo) throws Exception {
		StringBuilder sql = new StringBuilder();
		sql.append("UPDATE CHARACTERS");
		sql.append("	   SET CHAR_ARMOR = NULL");
		sql.append("	 WHERE CHAR_IDX = ?");
		
		list.add(vo.getCharIdx());
		result = jdbc.update(sql.toString(), list);
		
		if(result > 0) {
			return true;
		}
		return false;
	}
	
	public boolean beingAtt(CharacterVO vo, double damage) throws Exception {
		int newHp = (int)(vo.getCharHp() - (damage - vo.getCharDef()));
		
		StringBuilder sql = new StringBuilder();
		sql.append("UPDATE CHARACTERS");
		sql.append("   SET CHAR_HP = ?");
		sql.append(" WHERE CHAR_IDX = ?");
		
		list.add(vo.getCharIdx());
		result = jdbc.update(sql.toString(), list);
		
		if(result > 0) {
			return true;
		}
		return false;
	}

	public boolean addGold(CharacterVO vo, int gold) throws Exception {
		StringBuilder sql = new StringBuilder();
		sql.append("UPDATE CHARACTERS");
		sql.append("   SET CHAR_GOLD = ?");
		sql.append(" WHERE CHAR_IDX = ?");
		
		list.add(vo.getCharGold() + gold);
		list.add(vo.getCharIdx());
		result = jdbc.update(sql.toString(), list);
		
		if(result > 0) {
			return true;
		}
		return false;
	}
	
	public boolean addItem(CharacterVO vo, String item) throws Exception {
		StringBuilder sql = new StringBuilder();
		sql.append(" INSERT INTO INVENTORY VALUES (");
		sql.append(" 	?,");
		sql.append(" 	?,");
		sql.append(" 	1)");
		
		list.add(item);
		list.add(vo.getCharIdx());
		result = jdbc.update(sql.toString(), list);
		
		if(result > 0) {
			return true;
		}
		return false;
	}

	public double basicAtt(CharacterVO vo) {
		double damage = vo.getCharAtt() * 1.2;
		return damage;
	}
	
	public Map<String, Object> skillAtt(CharacterVO vo, String skillName) throws Exception {
		StringBuilder sql = new StringBuilder();
		sql.append("SELECT S.SKILL_ATT,");
		sql.append("	    S.SKILL_MP,");
		sql.append("	    S.SKILL_LEV");
		sql.append("   FROM SKILLS S, CHARACTERS C");
		sql.append("  WHERE S.JOB = C.JOB");
		sql.append("    AND S.SKILL_NM = ?");
		sql.append("    AND C.CHAR_IDX = ?");
		
		list.add(skillName);
		list.add(vo.getCharIdx());
		Map<String, Object> result = jdbc.selectOne(sql.toString(), list);
		
		return result;
	}
	
	public boolean beforSkillUse(CharacterVO vo, List<Integer> list) throws Exception {
		StringBuilder sql = new StringBuilder();
		sql.append("UPDATE CHARACTERS");
		sql.append("       SET CHAR_MP = ?");
		sql.append("     WHERE CHAR_IDX = ?");
		
		this.list.add(list.get(1));
		this.list.add(vo.getCharIdx());
		result = jdbc.update(sql.toString(), this.list);
		
		if(result > 0) {
			return true;
		}
		return false;
	}
	
	public boolean getExe(CharacterVO vo, int exe) throws Exception {
		int increaseExe = vo.getCharExe() + exe;
		if(increaseExe >= vo.getCharMaxExe()) {
			int newExe = increaseExe - vo.getCharMaxExe();
			return levelUp(vo, newExe);
		}
		StringBuilder sql = new StringBuilder();
		sql.append("UPDATE CHARACTERS");
		sql.append("   SET CHAR_EXE = ?");
		sql.append(" WHERE CHAR_IDX = ?");
		
		list.add(vo.getCharMaxExe() + exe);
		list.add(vo.getCharIdx());
		result = jdbc.update(sql.toString(), list);
		
		if(result > 0) {
			return true;
		}
		return false;
	}
	
	public boolean levelUp(CharacterVO vo, int leftExe) throws Exception {
		int newHp = (int)(vo.getCharMaxHp() * 1.3);
		int newMp = (int)(vo.getCharMaxMp() * 1.2);
		int newExe = (int)(vo.getCharMaxExe() * 1.3);
		int newAtt = (int)(vo.getCharAtt() * 1.1);
		int newDef = (int)(vo.getCharDef() * 1.1);
		int nextLev = vo.getCharLevel() + 1;
		
		
		StringBuilder sql = new StringBuilder();
		sql.append("UPDATE CHARACTERS");
		sql.append("   SET (CHAR_HP, ");
		sql.append("        CHAR_MAX_HP, ");
		sql.append("        CHAR_MP, ");
		sql.append("        CHAR_MAX_MP, ");
		sql.append("        CHAR_ATT, ");
		sql.append("        CHAR_DEF, ");
		sql.append("        CHAR_EXE, ");
		sql.append("        CHAR_MAX_EXE, ");
		sql.append("        CHAR_LEV) = (?, ?, ?, ?, ?, ?, ?, ?, ?)");
		sql.append(" WHERE CHAR_IDX = ?");
		
		list.add(newHp);
		list.add(newHp);
		list.add(newMp);
		list.add(newMp);
		list.add(newAtt);
		list.add(newDef);
		list.add(leftExe);
		list.add(newExe);
		list.add(nextLev);
		list.add(vo.getCharIdx());
		
		result = jdbc.update(sql.toString(), list);

		if(result > 0) {
			return true;
		}
		return false;
	}
	
}

























